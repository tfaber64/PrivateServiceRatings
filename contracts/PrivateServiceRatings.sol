// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

/**
 * Private Service Ratings (Aggregated Only) ‚Äî v1.1
 * - –†–µ–π—Ç–∏–Ω–≥–∏ 1..5, –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ sum/count (–æ–±–∞ euint32).
 * - –î—É–±–ª–∏ –ø–æ user+service –∑–∞–ø—Ä–µ—â–µ–Ω—ã (plain bool).
 * - submitRating: –≤—Å–µ–≥–¥–∞ –≤—ã–¥–∞—ë–º –ø—Ä–∞–≤–æ —á—Ç–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (userDecrypt).
 * - makeAggregatesPublic: –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç—ã (sum' = sum + 0), –∏ —É–∂–µ –Ω–∞ –Ω–∏—Ö –¥–µ–ª–∞–µ–º makePubliclyDecryptable.
 */

import { FHE, ebool, euint32, externalEuint32 } from "@fhevm/solidity/lib/FHE.sol";
import { SepoliaConfig } from "@fhevm/solidity/config/ZamaConfig.sol";

contract PrivateServiceRatings is SepoliaConfig {
    /* ---------------------------- Version & Ownership ---------------------------- */

    function version() external pure returns (string memory) {
        return "PrivateServiceRatings/1.1.0";
    }

    address public owner;
    modifier onlyOwner() { require(msg.sender == owner, "Not owner"); _; }

    constructor() { owner = msg.sender; }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Zero owner");
        owner = newOwner;
    }

    /* --------------------------------- Storage ---------------------------------- */

    struct Aggregates {
        bool exists;
        euint32 sum;
        euint32 count;
    }

    mapping(bytes32 => Aggregates) private _svc;
    mapping(bytes32 => mapping(address => bool)) private _rated;

    /* ---------------------------------- Events ---------------------------------- */

    event RatingSubmitted(bytes32 indexed serviceId, address indexed rater, bytes32 sumHandle, bytes32 countHandle);
    event ServiceInitialized(bytes32 indexed serviceId);
    event AggregatesMadePublic(bytes32 indexed serviceId);

    /* ------------------------------- Admin: init -------------------------------- */

    function initService(bytes32 serviceId) external onlyOwner {
        Aggregates storage A = _svc[serviceId];
        A.exists = true;
        A.sum   = FHE.asEuint32(0);
        A.count = FHE.asEuint32(0);

        // –ö–æ–Ω—Ç—Ä–∞–∫—Ç—É –Ω—É–∂–Ω–æ —É–º–µ—Ç—å —á–∏—Ç–∞—Ç—å/–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∞–≥—Ä–µ–≥–∞—Ç—ã
        FHE.allowThis(A.sum);
        FHE.allowThis(A.count);

        emit ServiceInitialized(serviceId);
    }

    /**
     * –ü—É–±–ª–∏—á–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (sum2=sum+0),
     * –¥–∞—ë–º —Å–µ–±–µ –¥–æ—Å—Ç—É–ø –∏ –¥–µ–ª–∞–µ–º public.
     */
    function makeAggregatesPublic(bytes32 serviceId) external onlyOwner {
        Aggregates storage A = _svc[serviceId];
        require(A.exists, "Service not found");

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç—ã –≤ —ç—Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        euint32 sum2   = FHE.add(A.sum,   FHE.asEuint32(0));
        euint32 count2 = FHE.add(A.count, FHE.asEuint32(0));

        // –ö–æ–Ω—Ç—Ä–∞–∫—Ç —á–∏—Ç–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        FHE.allowThis(sum2);
        FHE.allowThis(count2);

        // –ü–æ–º–µ—á–∞–µ–º –Ω–æ–≤—ã–µ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç—ã –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–µ
        FHE.makePubliclyDecryptable(sum2);
        FHE.makePubliclyDecryptable(count2);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ (–º–æ–∂–Ω–æ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å, –Ω–æ —Ç–∞–∫ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–µ–µ)
        A.sum   = sum2;
        A.count = count2;

        emit AggregatesMadePublic(serviceId);
    }

    /* ------------------------------ Submit rating ------------------------------- */

    function submitRating(
        bytes32 serviceId,
        externalEuint32 ratingExt,
        bytes calldata proof
    ) external {
        Aggregates storage A = _svc[serviceId];
        require(A.exists, "Service not found");
        require(!_rated[serviceId][msg.sender], "Already rated");

        // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
        euint32 rating = FHE.fromExternal(ratingExt, proof);

        // 1..5 ?
        ebool okLow  = FHE.ge(rating, FHE.asEuint32(1));
        ebool okHigh = FHE.le(rating, FHE.asEuint32(5));
        ebool valid  = FHE.and(okLow, okHigh);

        // valid ? rating : 0
        euint32 incVal = FHE.select(valid, rating, FHE.asEuint32(0));
        // valid ? 1 : 0
        euint32 incCnt = FHE.select(valid, FHE.asEuint32(1), FHE.asEuint32(0));

        // –ù–æ–≤—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã
        euint32 newSum   = FHE.add(A.sum,   incVal);
        euint32 newCount = FHE.add(A.count, incCnt);

        // –†–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        FHE.allowThis(newSum);
        FHE.allowThis(newCount);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        A.sum   = newSum;
        A.count = newCount;

        // üîì –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ (userDecrypt)
        FHE.allow(A.sum,   msg.sender);
        FHE.allow(A.count, msg.sender);

        _rated[serviceId][msg.sender] = true;

        emit RatingSubmitted(serviceId, msg.sender, FHE.toBytes32(A.sum), FHE.toBytes32(A.count));
    }

    /* --------------------------------- Getters ---------------------------------- */

    function hasRated(bytes32 serviceId, address user) external view returns (bool) {
        return _rated[serviceId][user];
    }

    function getAggregateHandles(bytes32 serviceId) external view returns (bytes32 sumH, bytes32 countH) {
        Aggregates storage A = _svc[serviceId];
        require(A.exists, "Service not found");
        return (FHE.toBytes32(A.sum), FHE.toBytes32(A.count));
    }
}
